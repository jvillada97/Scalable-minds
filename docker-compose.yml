version: '3.8'

networks:
  pulsar:
    driver: bridge
  saganet:
    driver: bridge
  servicesnet:
    driver: bridge

services:
  pulsar:
    image: apachepulsar/pulsar:3.2.0
    container_name: pulsar
    restart: on-failure
    ports:
      - "6650:6650"
      - "8080:8080"
    environment:
      PULSAR_MEM: "-Xms512m -Xmx512m"
    command: ["bin/pulsar", "standalone"]
    networks:
      - pulsar
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/admin/v2/clusters || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:alpine
    container_name: postgres
    ports:
      - "5432:5432"
    networks:
      - pulsar
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5

  imagenes_medicas:
    container_name: imagenes_medicas
    hostname: imagenes_medicas
    restart: on-failure
    build:
      context: .
      dockerfile: imagen_medica.Dockerfile
    environment:
      - BROKER_HOST=pulsar
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - PYTHONPATH=/src
    ports:
      - "5001:5001"
    networks:
      - pulsar
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy

  anonimizacion_datos:
    container_name: anonimizacion_datos
    hostname: anonimizacion_datos
    restart: on-failure
    build:
      context: .
      dockerfile: anonimizacion.Dockerfile
    environment:
      - BROKER_HOST=pulsar
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - PYTHONPATH=/src
    ports:
      - "5003:5003"
    networks:
      - pulsar
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy

  proveedores_alpes:
    container_name: proveedores_alpes
    hostname: proveedores_alpes
    restart: on-failure
    build:
      context: .
      dockerfile: proveedor.Dockerfile
    environment:
      - BROKER_HOST=pulsar
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - PYTHONPATH=/src
    ports:
      - "5002:5002"
    networks:
      - pulsar
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy

  sagadb:
    image: postgres:latest
    container_name: sagadb
    ports:
      - "5435:5432"
    networks:
      - saganet
    environment:
      POSTGRES_DB: sagadb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5

  saga:
    container_name: saga
    hostname: saga
    restart: on-failure
    build:
      context: .
      dockerfile: saga.Dockerfile
    environment:
      - BROKER_HOST=pulsar
      - POSTGRES_DB=sagadb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=sagadb
      - POSTGRES_PORT=5432
      - HOST_PROVEEDOR=http://proveedores_alpes:5002   
      - HOST_IMAGENMEDICA=http://imagenes_medicas:5001   
    ports:
      - "5004:5004"
    networks:
      - pulsar
      - saganet
      - servicesnet
    depends_on:
      sagadb:
        condition: service_healthy
      pulsar:
        condition: service_started